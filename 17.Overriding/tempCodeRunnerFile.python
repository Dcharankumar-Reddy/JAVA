def knapsack(weights, values, capacity):
    n = len(values)
    # Create a table to store the maximum value that can be obtained
    # for each capacity and subproblem
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            # If the current item's weight is less than or equal to
            # the current capacity, we have two choices:
            # 1. Include the item
            # 2. Exclude the item
            if weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                # If the current item's weight exceeds the current capacity,
                # we can't include it, so just take the value from the previous row
                dp[i][w] = dp[i - 1][w]

    # Reconstruct the solution
    items = []
    i, w = n, capacity
    while i > 0 and w > 0:
        if dp[i][w] != dp[i - 1][w]:
            items.append(i - 1)
            w -= weights[i - 1]
        i -= 1

    items.reverse()
    return dp[n][capacity], items

# Example usage:
weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
capacity = 5
max_value, selected_items = knapsack(weights, values, capacity)
print("Maximum value:", max_value)
print("Selected items:", selected_items)
